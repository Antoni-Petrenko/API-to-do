{"version":3,"sources":["components/createTaskBar/CreateTask.module.scss","components/message/Massage.module.scss","components/header/Icon.js","BackendAPI/api.js","store/actionCreators.js","store/actions.js","components/header/LoginBar.js","components/header/Header.js","components/createTaskBar/CreateTask.js","components/tasks/TaskItem.js","components/tasks/Tasks.js","components/controllButtons/PaginationButton.js","components/controllButtons/PaginationButtons.js","components/controllButtons/SortButton.js","components/controllButtons/SortButtons.js","components/message/Message.js","App.js","store/reducer.js","index.js","components/header/header.module.scss","components/controllButtons/ControllButtons.module.scss","components/tasks/Task.module.scss"],"names":["module","exports","connect","state","isAdmin","className","IconContainer","Logo","uxcandyAPI","requestURL","name","baseRequestURL","devName","this","sort_field","param","sort_direction","page","login","edit","id","create","fetchingTaskListSuccess","taskList","total_task_count","type","fetchingTaskListError","errorMassage","PostingEditedDataError","status","message","responseStatus","responseMessage","getTaskList","pageNumber","localStorage","getItem","sortField","sortDirection","dispatch","a","async","fetch","response","json","data","tasks","i","Math","ceil","push","error","console","log","Logout","removeItem","onLogin","form","method","body","token","setItem","setTimeout","mesage","password","responseMassage","getLogin","onLogout","initState","username","useState","userLogin","setUserLogin","handleInputs","e","newState","target","value","Btn","onClick","Form","onSubmit","preventDefault","FormData","append","FormGroup","onChange","placeholder","required","Header","header","onSetNewTask","sendNewTask","email","text","newTask","setNewTask","handleInput","CreateTaskInputs","adminToken","onEdit","taskId","setEdit","isTaskTextEdit","endsWith","slice","length","task","setTask","handleSubmit","Task","TaskLabel","htmlFor","TaskForm","TaskTextarea","style","display","checked","onLoad","useEffect","TaskContainer","map","item","key","PaginationButton","num","handleClick","color","BtnPaginationContainer","index","onSort","clickCount","direction","setState","prevState","SortButtons","BtnSortContainer","SortButton","MassageContainer","rSuccess","rError","App","initialState","store","createStore","action","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1447c6d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateTask_form__2sAGP\",\"CreateTaskInputs\":\"CreateTask_CreateTaskInputs__1YwNT\",\"Btn\":\"CreateTask_Btn__KR774\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MassageContainer\":\"Massage_MassageContainer__3FCrF\",\"rSuccess\":\"Massage_rSuccess__2qDJP\",\"rError\":\"Massage_rError__2C-Ci\"};","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {IconContainer,Logo} from './header.module.scss';\r\nimport {FaUser,FaUserTie} from 'react-icons/fa';\r\n\r\nconst Icon = ({isAdmin}) => {\r\n  return (\r\n    <div className={IconContainer}>\r\n      {isAdmin?\r\n      <h2 className={Logo}>\r\n        <FaUserTie />\r\n        <span>Админ</span>\r\n      </h2>:\r\n\r\n      <h2 className={Logo}>\r\n        <FaUser/>\r\n        <span>Гость</span>\r\n      </h2>}\r\n    </div>\r\n  )\r\n}\r\nfunction mapStateToProps(state){\r\n    return{\r\n        isAdmin:state.isAdmin\r\n    }\r\n}\r\nexport default connect(mapStateToProps,null)(Icon)\r\n","class API {\r\n    constructor(requestURL,name){\r\n        const baseRequestURL=requestURL;\r\n        const devName=name;\r\n        this.sort_field=(param='id')=>{\r\n            return `&sort_field=${param}`\r\n        }\r\n        this.sort_direction=(param='asc')=>{\r\n            return `&sort_direction=${param}`\r\n        }\r\n        this.page=(param=1)=>{\r\n            return `${baseRequestURL}?developer=${devName}&page=${param}`\r\n        }\r\n        this.login=()=>{\r\n            return `${baseRequestURL}login?developer=${devName}`\r\n        }\r\n        this.edit=(id)=>{\r\n            return `${baseRequestURL}edit/${id}?developer=${devName}`\r\n        }\r\n        this.create=()=>{\r\n            return `${baseRequestURL}create?developer=${devName}`\r\n        }\r\n    }\r\n}\r\nexport const uxcandyAPI=new API('https://uxcandy.com/~shapoval/test-task-backend/v2/','Anton-Petrenko');","\r\nexport function fetchingTaskListStart(){\r\n    return{\r\n        type:'FETCH_TASK_LIST_START'\r\n    }\r\n}\r\nexport function fetchingTaskListSuccess(taskList,total_task_count){\r\n    return{\r\n        type:'FETCH_TASK_LIST_SUCCESS',\r\n        taskList,\r\n        total_task_count\r\n    }\r\n}\r\nexport function fetchingTaskListError(errorMassage){\r\n    return{\r\n        type:'FETCH_TASK_LIST_ERROR',\r\n        errorMassage\r\n    }\r\n}\r\n\r\n\r\nexport function fetchingLoginTokenStart(){\r\n    return{\r\n        type:'FETCH_LOGIN_TOKEN_START'\r\n    }\r\n}\r\nexport function fetchingLoginTokenSuccess(token){\r\n    \r\n    return{\r\n        type:'FETCH_LOGIN_TOKEN_SUCCESS',\r\n        token\r\n    }\r\n}\r\nexport function fetchingLoginTokenError(mesage,status){\r\n    return{\r\n        type:'FETCH_LOGIN_TOKEN_ERROR',\r\n        responseMassage:mesage,\r\n        responseStatus:status\r\n    }\r\n}\r\n\r\n\r\nexport function StartSendingNewTask(){\r\n    return{\r\n        type:'START_SENDING_NEW_TASK'\r\n    }\r\n}\r\nexport function SendingNewTaskSuccess(status){\r\n    return{\r\n        type:'SENDING_NEW_TASK_SUCCESS',\r\n        responseStatus:status,\r\n   }\r\n}\r\nexport function SendingNewTaskError(){\r\n    return{\r\n        type:'SENDING_NEW_TASK_ERROR'\r\n    }\r\n}\r\n\r\nexport function StartPostingEditedData(){\r\n    return {\r\n        type:'START_POSTING_EDITED_DATA'\r\n    }\r\n}\r\nexport function PostingEditedDataSuccess(status){\r\n    return{\r\n        type:'POSTING_EDITED_DATA_SUCCESS',\r\n        responseStatus:status,\r\n    }\r\n}\r\nexport function PostingEditedDataError(status,message){\r\n    message=(message==='Невалидный токен'?'У вас нет прав администратора.':message);\r\n    return{\r\n        type:'POSTING_EDITED_DATA_ERROR',\r\n        responseStatus:status,\r\n        responseMessage:message\r\n    }\r\n}\r\n\r\nexport function MessageRefresh(){\r\n    return{\r\n        type:'MESSAGE_REFRESH'\r\n    }\r\n}\r\n\r\nexport function Exit(){\r\n    localStorage.removeItem('token');\r\n   return {\r\n        type:'EXIT',\r\n        isAdmin:false\r\n    }\r\n}\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {uxcandyAPI} from '../BackendAPI/api';\r\nimport {\r\n    fetchingTaskListStart,\r\n    fetchingTaskListSuccess,\r\n    fetchingTaskListError,\r\n    fetchingLoginTokenStart,\r\n    fetchingLoginTokenSuccess,\r\n    fetchingLoginTokenError,\r\n    StartSendingNewTask,\r\n    SendingNewTaskSuccess,\r\n    SendingNewTaskError,\r\n    StartPostingEditedData,\r\n    PostingEditedDataSuccess,\r\n    PostingEditedDataError,\r\n    MessageRefresh,\r\n    Exit\r\n} from './actionCreators';\r\n\r\nconst showMesageTime=3000;\r\n\r\n\r\nexport function getTaskList(\r\n        pageNumber=localStorage.getItem('currentPagePosition')||1,\r\n        sortField=localStorage.getItem('sortField')||'id',\r\n        sortDirection=localStorage.getItem('sortDirection')||'asc'\r\n    ){\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(fetchingTaskListStart());\r\n            const response= await fetch(uxcandyAPI.page(pageNumber)+\r\n                                        uxcandyAPI.sort_field(sortField)+\r\n                                        uxcandyAPI.sort_direction(sortDirection));\r\n            const data=await response.json();\r\n        if(data.status==='ok'){\r\n            const tasks=data.message.tasks;\r\n            const total_task_count=[]\r\n                for(let i=1;i<=Math.ceil(data.message.total_task_count/3);i++){\r\n                    total_task_count.push(1)\r\n                }\r\n            dispatch(fetchingTaskListSuccess(tasks,total_task_count))\r\n        }else{\r\n            dispatch(fetchingTaskListError(data.message.error))\r\n        }\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }   \r\n}\r\n\r\nexport  function getLogin(form){\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(fetchingLoginTokenStart());\r\n            const response=await fetch(uxcandyAPI.login(),{\r\n                                                            method:'POST',\r\n                                                            body:form\r\n                                                        })\r\n            const data=await response.json();\r\n        if(data.status==='ok'){\r\n            dispatch(fetchingLoginTokenSuccess(data.message.token));\r\n            localStorage.setItem('token',data.message.token);                \r\n\r\n        }else{\r\n            setTimeout(()=>{\r\n                dispatch(MessageRefresh())\r\n            },showMesageTime);\r\n            dispatch(fetchingLoginTokenError(data.message.password,data.status))\r\n            }\r\n        }catch(e){\r\n            throw console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function sendNewTask(form){\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(StartSendingNewTask());\r\n            const response=await fetch(uxcandyAPI.create(),{\r\n                                                            method:'POST',\r\n                                                            body:form\r\n                                                        });\r\n            \r\n            const data = await response.json();\r\n        if(data.status==='ok'){\r\n            setTimeout(()=>{\r\n                dispatch(MessageRefresh())\r\n            },showMesageTime);\r\n            dispatch(SendingNewTaskSuccess(data.status))\r\n            dispatch(getTaskList())\r\n        }else{\r\n            dispatch(SendingNewTaskError())\r\n        } \r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport function setEdit(taskId,text){\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(StartPostingEditedData());\r\n            const response=await fetch(uxcandyAPI.edit(taskId),{\r\n                                                                method:'POST',\r\n                                                                body:text\r\n                                                            })\r\n            const data=await response.json();\r\n            console.log(data)\r\n        if(data.status==='ok'){\r\n            setTimeout(()=>{\r\n                dispatch(MessageRefresh());\r\n            },showMesageTime);\r\n            dispatch(PostingEditedDataSuccess(data.status));\r\n            dispatch(getTaskList());\r\n        }else{\r\n            setTimeout(()=>{\r\n                dispatch(MessageRefresh())\r\n            },showMesageTime);\r\n            dispatch(PostingEditedDataError(data.status,data.message.token))\r\n            }\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function Logout(){\r\n    return  dispatch=>{\r\n        dispatch(Exit());\r\n        dispatch(getTaskList())\r\n    }\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Btn,FormGroup,Form} from './header.module.scss';\r\nimport { getLogin, Logout } from '../../store/actions';\r\n\r\n\r\nconst LoginBar = ({onLogin,isAdmin,onLogout}) => {\r\n\r\n  const initState={username:'',password:''}\r\n\r\n  const [userLogin,setUserLogin]=useState(initState);\r\n\r\n const handleInputs=(e)=>{\r\n    const newState={...userLogin};\r\n    newState[e.target.id]=e.target.value\r\n    setUserLogin(newState);\r\n}\r\n const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    const form=new FormData();\r\n    form.append('username',userLogin.username);\r\n    form.append('password',userLogin.password);\r\n    setUserLogin(initState)\r\n    onLogin(form)\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n    {isAdmin?\r\n    <button className={Btn} onClick={onLogout}>Выход</button>:\r\n      <form className={Form} onSubmit={handleSubmit}>\r\n        <div className={FormGroup}>\r\n          <input type=\"text\" id='username' value={userLogin.username} onChange={handleInputs} \r\n        placeholder=\"Логин\" required/>\r\n        </div>\r\n        <div className={FormGroup}>\r\n          <input type=\"password\" id='password' value={userLogin.password} onChange={handleInputs} placeholder=\"Пароль\" required/>\r\n        </div>\r\n          \r\n        <button className={Btn}>Войти</button>\r\n      </form>\r\n      }\r\n    </>\r\n    \r\n  )\r\n}\r\nfunction mapStateToProps(state){\r\n  return{\r\n    isAdmin:state.isAdmin\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n      onLogin: form=>dispatch(getLogin(form)),\r\n      onLogout: ()=>dispatch(Logout())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginBar)\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport LoginBar from './LoginBar';\r\nimport {header} from './header.module.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={header}>\r\n        <Icon/>\r\n        <LoginBar/>\r\n    </header>\r\n  )\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React,{useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {sendNewTask} from '../../store/actions';\r\nimport {form,Btn,CreateTaskInputs} from './CreateTask.module.scss';\r\n\r\n\r\nconst CreateTask = ({onSetNewTask}) => {\r\n    const initState={\r\n        username:'',\r\n        email:'',\r\n        text:'',\r\n    };\r\n\r\nconst [newTask,setNewTask]=useState(initState);\r\n\r\nconst handleInput=(e)=>{\r\n    const newState={...newTask};\r\n    newState[e.target.name]=e.target.value;\r\n    setNewTask(newState);\r\n}\r\n\r\nconst handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    const form=new FormData();\r\n    form.append('username',newTask.username);\r\n    form.append('email',newTask.email);\r\n    form.append('text',newTask.text);\r\n    setNewTask(initState);\r\n    onSetNewTask(form)\r\n}\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n        <input className={CreateTaskInputs} type=\"text\" name='username' onChange={handleInput} value={newTask.username} placeholder='Имя пользователя' required/>\r\n        <input className={CreateTaskInputs} type=\"email\" name='email' onChange={handleInput} value={newTask.email} placeholder='E-mail' required/>\r\n        <input className={CreateTaskInputs} type=\"text\" name='text'  onChange={handleInput} value={newTask.text}  placeholder='Задача' required/>\r\n        <button className={Btn}>Создать задание</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n        onSetNewTask: form=>dispatch(sendNewTask(form))\r\n    }\r\n}\r\nexport default connect(null,mapDispatchToProps)(CreateTask)\r\n","import React,{useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setEdit} from '../../store/actions';\r\nimport {MdRadioButtonUnchecked,MdRadioButtonChecked} from \"react-icons/md\";\r\nimport {Task, TaskLabel,TaskForm,TaskTextarea,Btn} from './Task.module.scss';\r\n\r\n\r\nconst TaskItem = ({id,username,email,text,status,isAdmin,onEdit}) => {\r\n\r\n  status=status?true:false; // transform status numbers 10&0 to boolean\r\n\r\n  const editedTaskKeyword='AdminEdit'; //key word which we add to task before send to server, for change detected\r\n\r\n  let isTaskTextEdit; \r\n\r\n  if(text.endsWith(editedTaskKeyword)){ //keyword detection in task text\r\n    isTaskTextEdit=true;\r\n    text=text.slice(0,text.length-editedTaskKeyword.length);  // cat keywor from taks text\r\n  }\r\n  \r\n  const[task,setTask]=useState({text,status});\r\n \r\n  const handleInput=(e)=>{\r\n      const newTask={...task};\r\n  if(e.target.name==='status'){\r\n      newTask[e.target.name]=!newTask[e.target.name];\r\n   }\r\n  else{\r\n        newTask[e.target.name]=e.target.value;\r\n   }\r\n  setTask(newTask); \r\n   }\r\n\r\n  const handleSubmit=(e)=>{\r\n    e.preventDefault();\r\n    const form=new FormData();\r\n    if(text!==task.text){ //If text from input !== text from state\r\n      form.append('text',task.text+editedTaskKeyword); //Add keyword to task text\r\n    }\r\n    form.append('status',task.status?'10':'0'); \r\n    form.append('token',localStorage.getItem('token'));\r\n    onEdit(id,form);\r\n  }\r\n  return (\r\n    <li className={Task}>\r\n      <label className={TaskLabel} htmlFor={id}>\r\n          {task.status?<MdRadioButtonChecked/>:<MdRadioButtonUnchecked/>}\r\n      </label>\r\n        <form className={TaskForm} onSubmit={isAdmin?handleSubmit:()=>console.log('авторизуйтесь')}>\r\n          <textarea className={TaskTextarea} name='text' value={task.text} onChange={isAdmin?handleInput:()=>console.log('авторизуйтесь')}/>\r\n          <input style={{display:'none'}} type='checkbox' name='status' id={id} checked={isAdmin?task.status:()=>console.log('авторизуйтесь')} onChange={handleInput}/>\r\n          <span>Имя: {username}</span>\r\n          <span>E-mail: {email}</span>\r\n          <span>{isTaskTextEdit&&'Редактировано Администратором'}</span>\r\n        </form>\r\n      <button className={Btn} onClick={isAdmin?handleSubmit:()=>console.log('авторизуйтесь')}>Редактировать</button>\r\n    </li>\r\n  )\r\n}\r\nfunction mapStateToProps(state){\r\n  return{\r\n      isAdmin:state.isAdmin,\r\n      adminToken:state.adminToken\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n  return{\r\n    onEdit: (taskId,text)=>dispatch(setEdit(taskId,text))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem) \r\n","import React,{useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport TaskItem from './TaskItem';\r\nimport {getTaskList} from '../../store/actions';\r\nimport {TaskContainer} from './Task.module.scss';\r\n\r\nconst Tasks = ({taskList,onLoad}) => {\r\n    \r\n   useEffect(()=>{\r\n       onLoad()\r\n    },[]); \r\n  return (\r\n        <div className={TaskContainer}> \r\n            <ul>{taskList.length?\r\n            taskList.map(item=><TaskItem key={item.id} id={item.id} {...item}/>):\r\n            <h2>Нет заданий на сегодня</h2>}\r\n            </ul>\r\n        </div>\r\n  )\r\n}\r\nfunction mapStateToProps(state){\r\n    return{\r\n        taskList:state.taskList,\r\n        total_task_count:state.total_task_count,\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n      onLoad: param=>dispatch(getTaskList(param)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Tasks);\r\n","import React from 'react';\r\nimport {Btn} from './ControllButtons.module.scss'\r\nconst PaginationButton = ({num,handleClick}) => {\r\n  return (\r\n  <button \r\n      className={Btn}\r\n      style={localStorage.getItem('currentPagePosition')===`${num}`?{color:'red'}:null} \r\n      onClick={()=>{\r\n          localStorage.setItem('currentPagePosition',`${num}`)\r\n          handleClick(num)\r\n    }\r\n  }>{num}\r\n  </button>\r\n  )\r\n}\r\n\r\nexport default PaginationButton\r\n","import React from 'react';\r\nimport PaginationBtn from './PaginationButton';\r\nimport {connect} from 'react-redux';\r\nimport {getTaskList} from '../../store/actions';\r\nimport {BtnPaginationContainer} from './ControllButtons.module.scss'\r\n\r\nconst PaginationButtons = ({total_task_count,onLoad}) => {\r\n  return (\r\n    <section>\r\n      <div className={BtnPaginationContainer}>{ \r\n          total_task_count.length?total_task_count.map((item,index)=>\r\n              <PaginationBtn handleClick={onLoad} key={index} num={index+1}/>):null\r\n      }</div>\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        total_task_count:state.total_task_count\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n        onLoad: page=>dispatch(getTaskList(page)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(PaginationButtons) \r\n","import React,{useState,useEffect} from 'react';\r\nimport {MdKeyboardArrowDown,MdKeyboardArrowUp} from \"react-icons/md\";\r\nimport {connect} from 'react-redux';\r\nimport {getTaskList} from '../../store/actions';\r\nimport {Btn} from './ControllButtons.module.scss';\r\n\r\n\r\nconst SortButtons = ({onSort,sortField}) => {\r\n\r\n  let[state,setState]=useState({clickCount:1,direction:'asc'});\r\n\r\n  useEffect(()=>{\r\n    if(state.clickCount!==1){\r\n      localStorage.setItem('sortDirection',state.direction);\r\n      localStorage.setItem('sortField',sortField);\r\n      onSort(localStorage.getItem('currentPagePosition'),sortField)\r\n    } \r\n  })\r\n\r\n  const sortListItem=()=>{\r\n    if(state.clickCount%2===0){\r\n        setState(prevState=>{\r\n            return{\r\n              clickCount:prevState.clickCount+1,\r\n              direction:'desc'\r\n            }\r\n        })\r\n    }else{\r\n      setState(prevState=>{\r\n          return{\r\n            clickCount:prevState.clickCount+1,\r\n            direction:'asc'\r\n          }\r\n      })\r\n    }\r\n  } \r\n  return (\r\n    <div>\r\n      <button className={Btn} onClick={sortListItem}>\r\n        {sortField}\r\n        {  state.direction==='asc'?<MdKeyboardArrowDown/>:<MdKeyboardArrowUp/>\r\n}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n  return{\r\n    onSort:(pageNumber,sortField,sortDirection)=>dispatch(getTaskList(pageNumber,sortField,sortDirection))\r\n  }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(SortButtons)\r\n","import React from 'react';\r\nimport SortButton from './SortButton';\r\nimport {BtnSortContainer} from './ControllButtons.module.scss'\r\nconst SortButtons = () => {\r\n  return (\r\n    <div className={BtnSortContainer} >{\r\n    ['статус','имя','email'].map((item,index)=>(<SortButton sortField={item} key={index}/>))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SortButtons\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {MassageContainer,rSuccess,rError} from './Massage.module.scss';\r\n\r\n\r\nconst Message = ({responseMessage,responseStatus}) => {\r\n\r\n  return (\r\n    <>\r\n        {responseStatus.length?\r\n        <div className={MassageContainer}>\r\n            <h2 className={responseStatus==='ok'?rSuccess:rError}>{responseMessage||'Успешно'}</h2>\r\n        </div>:\r\n        <div className={MassageContainer}>\r\n        </div>}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        responseStatus: state.responseStatus,\r\n        responseMessage: state.responseMessage\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Message)\r\n","import React from 'react';\nimport Header from './components/header/Header';\nimport CreateTask from './components/createTaskBar/CreateTask';\nimport Tasks from './components/tasks/Tasks';\nimport PaginationButtons from './components/controllButtons/PaginationButtons';\nimport SortButtons from './components/controllButtons/SortButtons';\nimport Message from './components/message/Message';\nimport './index.css';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Header/>\n        <main>\n          <Message/>\n          <CreateTask/>\n          <PaginationButtons/>\n          <SortButtons/>\n          <Tasks/>\n        </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","\r\nconst initialState={\r\n    taskList:[],\r\n    isAdmin:localStorage.getItem('token')?true:false,\r\n    responseStatus:'',\r\n    responseMessage:'',\r\n    total_task_count:'',\r\n}\r\n\r\n\r\nexport default (state=initialState,action)=>{\r\n    switch(action.type){\r\n        case 'FETCH_LOGIN_TOKEN_START':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'FETCH_LOGIN_TOKEN_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isAdmin:true,\r\n                adminToken:action.token\r\n            }\r\n        case 'FETCH_LOGIN_TOKEN_ERROR':\r\n            return {\r\n                ...state,\r\n                isAdmin:false,\r\n                responseMessage:action.responseMassage,\r\n                responseStatus:action.responseStatus\r\n            } \r\n\r\n        case 'FETCH_TASK_LIST_START':\r\n            return{\r\n                ...state\r\n            }\r\n        case 'FETCH_TASK_LIST_SUCCESS':\r\n            return  {\r\n            ...state,\r\n            taskList:action.taskList,\r\n            total_task_count:action.total_task_count\r\n            }\r\n        case 'FETCH_TASK_LIST_ERROR':\r\n            return {\r\n                ...state,\r\n                errorMassage:action.errorMassage\r\n            }\r\n        case 'START_POSTING_EDITED_DATA':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'POSTING_EDITED_DATA_SUCCESS':\r\n            return{\r\n                ...state,responseStatus:action.responseStatus\r\n            }    \r\n        case 'POSTING_EDITED_DATA_ERROR': \r\n        return{\r\n            ...state,\r\n            isAdmin:false,\r\n            responseStatus:action.responseStatus,\r\n            responseMessage:action.responseMessage\r\n        }   \r\n        case 'START_SENDING_NEW_TASK':\r\n            return{\r\n                ...state\r\n            }\r\n        case 'SENDING_NEW_TASK_SUCCESS':\r\n            return{\r\n                ...state,\r\n                responseStatus:action.responseStatus,\r\n                responseMessage:''\r\n            }\r\n        case 'SENDING_NEW_TASK_ERROR':\r\n            return{\r\n                ...state\r\n            }\r\n        case 'EXIT':\r\n            return{\r\n                ...state,adminToken:action.adminToken,isAdmin:action.isAdmin\r\n            }\r\n        case 'MESSAGE_REFRESH':\r\n        return{\r\n            ...state,\r\n            responseStatus:'',\r\n            responseMessage:''\r\n        }    \r\n        \r\n        default:\r\n        return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {createStore,applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from './store/reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n//If you want to use ReduxDevTools import compose from redux----\r\n//                                                              |\r\n//                                                              V\r\n// const composeEnhancers =\r\n//   typeof window === 'object' &&\r\n//   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n//       // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n//     }) : compose;\r\n// const store=createStore(reducer,composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst store=createStore(reducer,applyMiddleware(thunk));\r\nconst app=(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(app,document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3OGO0\",\"Form\":\"header_Form__2UcT0\",\"FormGroup\":\"header_FormGroup__2qyAc\",\"Btn\":\"header_Btn__1WUdQ\",\"Logo\":\"header_Logo__2MM7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Btn\":\"ControllButtons_Btn__1Li3r\",\"BtnPaginationContainer\":\"ControllButtons_BtnPaginationContainer__2jo8a\",\"BtnSortContainer\":\"ControllButtons_BtnSortContainer__2gxdE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskContainer\":\"Task_TaskContainer__39SHD\",\"Task\":\"Task_Task__1GcLs\",\"TaskLabel\":\"Task_TaskLabel__1lmXM\",\"TaskForm\":\"Task_TaskForm__1_xi6\",\"TaskTextarea\":\"Task_TaskTextarea__greOa\",\"Btn\":\"Task_Btn__2E27L\"};"],"sourceRoot":""}