{"version":3,"sources":["components/createTaskBar/CreateTask.module.scss","components/message/Massage.module.scss","components/header/Icon.js","BackendAPI/api.js","store/actionCreators.js","store/actions.js","components/header/LoginBar.js","components/header/Header.js","components/createTaskBar/CreateTask.js","components/tasks/TaskItem.js","components/tasks/Tasks.js","components/controllButtons/PaginationButton.js","components/controllButtons/PaginationButtons.js","components/controllButtons/SortButton.js","components/controllButtons/SortButtons.js","components/message/Message.js","App.js","store/reducer.js","index.js","components/header/header.module.scss","components/controllButtons/ControllButtons.module.scss","components/tasks/Task.module.scss"],"names":["module","exports","connect","state","isAdmin","className","IconContainer","Logo","uxcandyAPI","baseRequestURL","devName","this","sort_field","param","sort_direction","page","login","edit","id","create","fetchingTaskListSuccess","taskList","total_task_count","type","fetchingTaskListError","errorMassage","PostingEditedDataError","status","message","responseStatus","responseMessage","getTaskList","pageNumber","localStorage","getItem","sortField","sortDirection","dispatch","a","async","fetch","response","json","data","tasks","i","Math","ceil","push","error","console","log","Logout","removeItem","onLogin","form","method","body","token","setItem","setTimeout","mesage","password","responseMassage","getLogin","onLogout","initState","username","useState","userLogin","setUserLogin","handleInputs","e","newState","target","name","value","Btn","onClick","Form","onSubmit","preventDefault","FormData","key","append","FormGroup","onChange","placeholder","required","Header","header","onSetNewTask","sendNewTask","email","text","newTask","setNewTask","handleInput","CreateTaskInputs","adminToken","onEdit","taskId","setEdit","isTaskTextEdit","endsWith","replace","task","setTask","handleSubmit","Task","TaskLabel","htmlFor","TaskForm","TaskTextarea","style","display","checked","onLoad","useEffect","TaskContainer","length","map","item","PaginationButton","num","handleClick","color","BtnPaginationContainer","index","onSort","clickCount","direction","setState","prevState","SortButtons","BtnSortContainer","SortButton","MassageContainer","rSuccess","rError","App","initialState","store","createStore","action","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.873c578b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateTask_form__2sAGP\",\"CreateTaskInputs\":\"CreateTask_CreateTaskInputs__1YwNT\",\"Btn\":\"CreateTask_Btn__KR774\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MassageContainer\":\"Massage_MassageContainer__3FCrF\",\"rSuccess\":\"Massage_rSuccess__2qDJP\",\"rError\":\"Massage_rError__2C-Ci\"};","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { IconContainer, Logo } from './header.module.scss';\r\nimport { FaUser, FaUserTie } from 'react-icons/fa';\r\n\r\nconst Icon = ({ isAdmin }) => {\r\n  return (\r\n    <div className={IconContainer}>\r\n      {isAdmin ?\r\n        <h2 className={Logo}>\r\n          <FaUserTie />\r\n          <span>Админ</span>\r\n        </h2> :\r\n\r\n        <h2 className={Logo}>\r\n          <FaUser />\r\n          <span>Гость</span>\r\n        </h2>}\r\n    </div>\r\n  )\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAdmin: state.isAdmin\r\n  }\r\n}\r\nexport default connect(mapStateToProps, null)(Icon)\r\n","class API {\r\n    constructor(baseRequestURL, devName) {\r\n        this.sort_field = (param = 'id') => {\r\n            return `&sort_field=${param}`\r\n        }\r\n        this.sort_direction = (param = 'asc') => {\r\n            return `&sort_direction=${param}`\r\n        }\r\n        this.page = (param = 1) => {\r\n            return `${baseRequestURL}?developer=${devName}&page=${param}`\r\n        }\r\n        this.login = () => {\r\n            return `${baseRequestURL}login?developer=${devName}`\r\n        }\r\n        this.edit = (id) => {\r\n            return `${baseRequestURL}edit/${id}?developer=${devName}`\r\n        }\r\n        this.create = () => {\r\n            return `${baseRequestURL}create?developer=${devName}`\r\n        }\r\n    }\r\n}\r\nexport const uxcandyAPI = new API('https://uxcandy.com/~shapoval/test-task-backend/v2/', 'hell');","\r\nexport function fetchingTaskListStart() {\r\n    return {\r\n        type: 'FETCH_TASK_LIST_START'\r\n    }\r\n}\r\nexport function fetchingTaskListSuccess(taskList, total_task_count) {\r\n    return {\r\n        type: 'FETCH_TASK_LIST_SUCCESS',\r\n        taskList,\r\n        total_task_count\r\n    }\r\n}\r\nexport function fetchingTaskListError(errorMassage) {\r\n    return {\r\n        type: 'FETCH_TASK_LIST_ERROR',\r\n        errorMassage\r\n    }\r\n}\r\n\r\n\r\nexport function fetchingLoginTokenStart() {\r\n    return {\r\n        type: 'FETCH_LOGIN_TOKEN_START'\r\n    }\r\n}\r\nexport function fetchingLoginTokenSuccess(token) {\r\n\r\n    return {\r\n        type: 'FETCH_LOGIN_TOKEN_SUCCESS',\r\n        token\r\n    }\r\n}\r\nexport function fetchingLoginTokenError(mesage, status) {\r\n    return {\r\n        type: 'FETCH_LOGIN_TOKEN_ERROR',\r\n        responseMassage: mesage,\r\n        responseStatus: status\r\n    }\r\n}\r\n\r\n\r\nexport function StartSendingNewTask() {\r\n    return {\r\n        type: 'START_SENDING_NEW_TASK'\r\n    }\r\n}\r\nexport function SendingNewTaskSuccess(status) {\r\n    return {\r\n        type: 'SENDING_NEW_TASK_SUCCESS',\r\n        responseStatus: status,\r\n    }\r\n}\r\nexport function SendingNewTaskError() {\r\n    return {\r\n        type: 'SENDING_NEW_TASK_ERROR'\r\n    }\r\n}\r\n\r\nexport function StartPostingEditedData() {\r\n    return {\r\n        type: 'START_POSTING_EDITED_DATA'\r\n    }\r\n}\r\nexport function PostingEditedDataSuccess(status) {\r\n    return {\r\n        type: 'POSTING_EDITED_DATA_SUCCESS',\r\n        responseStatus: status,\r\n    }\r\n}\r\nexport function PostingEditedDataError(status, message) {\r\n    message = (message === 'Невалидный токен' ? 'У вас нет прав администратора.' : message);\r\n    return {\r\n        type: 'POSTING_EDITED_DATA_ERROR',\r\n        responseStatus: status,\r\n        responseMessage: message\r\n    }\r\n}\r\n\r\nexport function MessageRefresh() {\r\n    return {\r\n        type: 'MESSAGE_REFRESH'\r\n    }\r\n}\r\n\r\nexport function Exit() {\r\n    localStorage.removeItem('token');\r\n    return {\r\n        type: 'EXIT',\r\n        isAdmin: false\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { uxcandyAPI } from '../BackendAPI/api';\r\nimport {\r\n    fetchingTaskListStart,\r\n    fetchingTaskListSuccess,\r\n    fetchingTaskListError,\r\n    fetchingLoginTokenStart,\r\n    fetchingLoginTokenSuccess,\r\n    fetchingLoginTokenError,\r\n    StartSendingNewTask,\r\n    SendingNewTaskSuccess,\r\n    SendingNewTaskError,\r\n    StartPostingEditedData,\r\n    PostingEditedDataSuccess,\r\n    PostingEditedDataError,\r\n    MessageRefresh,\r\n    Exit\r\n} from './actionCreators';\r\n\r\nconst showMesageTime = 3000;\r\n\r\n\r\nexport function getTaskList(\r\n    pageNumber = localStorage.getItem('currentPagePosition') || 1,\r\n    sortField = localStorage.getItem('sortField') || 'id',\r\n    sortDirection = localStorage.getItem('sortDirection') || 'asc'\r\n) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(fetchingTaskListStart());\r\n            const response = await fetch(uxcandyAPI.page(pageNumber) +\r\n                uxcandyAPI.sort_field(sortField) +\r\n                uxcandyAPI.sort_direction(sortDirection));\r\n            const data = await response.json();\r\n            if (data.status === 'ok') {\r\n                const tasks = data.message.tasks;\r\n                const total_task_count = []\r\n                for (let i = 1; i <= Math.ceil(data.message.total_task_count / 3); i++) {\r\n                    total_task_count.push(1)\r\n                }\r\n                dispatch(fetchingTaskListSuccess(tasks, total_task_count))\r\n            } else {\r\n                dispatch(fetchingTaskListError(data.message.error))\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLogin(form) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(fetchingLoginTokenStart());\r\n            const response = await fetch(uxcandyAPI.login(), {\r\n                method: 'POST',\r\n                body: form\r\n            })\r\n            const data = await response.json();\r\n            if (data.status === 'ok') {\r\n                dispatch(fetchingLoginTokenSuccess(data.message.token));\r\n                localStorage.setItem('token', data.message.token);\r\n\r\n            } else {\r\n                setTimeout(() => {\r\n                    dispatch(MessageRefresh())\r\n                }, showMesageTime);\r\n                dispatch(fetchingLoginTokenError(data.message.password, data.status))\r\n            }\r\n        } catch (e) {\r\n            throw console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function sendNewTask(form) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(StartSendingNewTask());\r\n            const response = await fetch(uxcandyAPI.create(), {\r\n                method: 'POST',\r\n                body: form\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (data.status === 'ok') {\r\n                setTimeout(() => {\r\n                    dispatch(MessageRefresh())\r\n                }, showMesageTime);\r\n                dispatch(SendingNewTaskSuccess(data.status))\r\n                dispatch(getTaskList())\r\n            } else {\r\n                dispatch(SendingNewTaskError())\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\nexport function setEdit(taskId, text) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(StartPostingEditedData());\r\n            const response = await fetch(uxcandyAPI.edit(taskId), {\r\n                method: 'POST',\r\n                body: text\r\n            })\r\n            const data = await response.json();\r\n            if (data.status === 'ok') {\r\n                setTimeout(() => {\r\n                    dispatch(MessageRefresh());\r\n                }, showMesageTime);\r\n                dispatch(PostingEditedDataSuccess(data.status));\r\n                dispatch(getTaskList());\r\n            } else {\r\n                setTimeout(() => {\r\n                    dispatch(MessageRefresh())\r\n                }, showMesageTime);\r\n                dispatch(PostingEditedDataError(data.status, data.message.token))\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport function Logout() {\r\n    return dispatch => {\r\n        dispatch(Exit());\r\n        dispatch(getTaskList())\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Btn, FormGroup, Form } from './header.module.scss';\r\nimport { getLogin, Logout } from '../../store/actions';\r\n\r\n\r\nconst LoginBar = ({ onLogin, isAdmin, onLogout }) => {\r\n\r\n  const initState = { username: '', password: '' }\r\n\r\n  const [userLogin, setUserLogin] = useState(initState);\r\n\r\n  const handleInputs = (e) => {\r\n    const newState = { ...userLogin };\r\n    newState[e.target.name] = e.target.value\r\n    setUserLogin(newState);\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = new FormData();\r\n    for (const key in userLogin) {\r\n      form.append(key, userLogin[key])\r\n    }\r\n    setUserLogin(initState)\r\n    onLogin(form)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {isAdmin ?\r\n        <button className={Btn} onClick={onLogout}>Выход</button> :\r\n        <form className={Form} onSubmit={handleSubmit}>\r\n          <div className={FormGroup}>\r\n            <input type=\"text\" name='username' value={userLogin.username} onChange={handleInputs}\r\n              placeholder=\"Логин\" required />\r\n          </div>\r\n          <div className={FormGroup}>\r\n            <input type=\"password\" name='password' value={userLogin.password} onChange={handleInputs} placeholder=\"Пароль\" required />\r\n          </div>\r\n\r\n          <button className={Btn}>Войти</button>\r\n        </form>\r\n      }\r\n    </>\r\n\r\n  )\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAdmin: state.isAdmin\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onLogin: form => dispatch(getLogin(form)),\r\n    onLogout: () => dispatch(Logout())\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginBar)\r\n","import React from 'react';\r\nimport Icon from './Icon';\r\nimport LoginBar from './LoginBar';\r\nimport { header } from './header.module.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className={header}>\r\n      <Icon />\r\n      <LoginBar />\r\n    </header>\r\n  )\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendNewTask } from '../../store/actions';\r\nimport { form, Btn, CreateTaskInputs } from './CreateTask.module.scss';\r\n\r\n\r\nconst CreateTask = ({ onSetNewTask }) => {\r\n    const initState = {\r\n        username: '',\r\n        email: '',\r\n        text: '',\r\n    };\r\n    \r\n\r\n    const [newTask, setNewTask] = useState(initState);\r\n\r\n    const handleInput = (e) => {\r\n        const newState = { ...newTask };\r\n        newState[e.target.name] = e.target.value;\r\n        setNewTask(newState);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const form = new FormData();\r\n        for (const key in newTask) {\r\n            form.append(key, newTask[key])\r\n        }\r\n        setNewTask(initState);\r\n        onSetNewTask(form);\r\n    }\r\n\r\n\r\n    return (\r\n        <form className={form} onSubmit={handleSubmit}>\r\n            <input className={CreateTaskInputs} type=\"text\" name='username' onChange={handleInput} value={newTask.username} placeholder='Имя пользователя' required />\r\n            <input className={CreateTaskInputs} type=\"email\" name='email' onChange={handleInput} value={newTask.email} placeholder='E-mail' required />\r\n            <input className={CreateTaskInputs} type=\"text\" name='text' onChange={handleInput} value={newTask.text} placeholder='Задача' required />\r\n            <button className={Btn}>Создать задание</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onSetNewTask: form => dispatch(sendNewTask(form))\r\n\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(CreateTask)\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setEdit } from '../../store/actions';\r\nimport { MdRadioButtonUnchecked, MdRadioButtonChecked } from \"react-icons/md\";\r\nimport { Task, TaskLabel, TaskForm, TaskTextarea, Btn } from './Task.module.scss';\r\n\r\n\r\nconst TaskItem = ({ id, username, email, text, status, isAdmin, onEdit }) => {\r\n\r\n  const editedTaskKeyword = 'AdminEdit'; //key word which we add to task before send to server, for change detected\r\n  status = !!+status; // converting status numbers 10&0 to boolean\r\n  const isTaskTextEdit = text.endsWith(editedTaskKeyword);\r\n  if (isTaskTextEdit) {\r\n    text = text.replace(editedTaskKeyword, '')\r\n  }\r\n\r\n  const [task, setTask] = useState({ text, status, isTaskTextEdit });\r\n\r\n  const handleInput = (e) => {\r\n    const newTask = { ...task };\r\n    if (e.target.name === 'status') {\r\n      newTask[e.target.name] = !newTask[e.target.name];\r\n    }\r\n    else {\r\n      newTask[e.target.name] = e.target.value;\r\n    }\r\n    setTask(newTask);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = new FormData();\r\n    if (text !== task.text) { //If text from input !== text from state\r\n      form.append('text', task.text + editedTaskKeyword); //Add keyword to task text\r\n    }\r\n    form.append('status', task.status ? '10' : '0');\r\n    form.append('token', localStorage.getItem('token'));\r\n    onEdit(id, form);\r\n  }\r\n\r\n  return (\r\n    <li className={Task}>\r\n      <label className={TaskLabel} htmlFor={id}>\r\n        {task.status ? <MdRadioButtonChecked /> : <MdRadioButtonUnchecked />}\r\n      </label>\r\n      <form className={TaskForm} onSubmit={handleSubmit}>\r\n        <textarea className={TaskTextarea} name='text' value={task.text} onChange={isAdmin ? handleInput : () => console.log('авторизуйтесь')} />\r\n        <input style={{ display: 'none' }} type='checkbox' name='status' id={id} checked={task.status} onChange={isAdmin ? handleInput : handleSubmit} />\r\n        <span>Имя: {username}</span>\r\n        <span>E-mail: {email}</span>\r\n        <span>{task.isTaskTextEdit && 'Редактировано Администратором'}</span>\r\n      </form>\r\n      <button className={Btn} onClick={handleSubmit}>Редактировать</button>\r\n    </li>\r\n  )\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAdmin: state.isAdmin,\r\n    adminToken: state.adminToken\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onEdit: (taskId, text) => dispatch(setEdit(taskId, text))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem) \r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TaskItem from './TaskItem';\r\nimport { getTaskList } from '../../store/actions';\r\nimport { TaskContainer } from './Task.module.scss';\r\n\r\nconst Tasks = ({ taskList, onLoad }) => {\r\n    useEffect(() => {\r\n        onLoad()\r\n    }, []);\r\n    return (\r\n        <div className={TaskContainer}>\r\n            <ul>{taskList.length ?\r\n                taskList.map(item => <TaskItem key={item.id} id={item.id} {...item} />) :\r\n                <h2>Нет заданий на сегодня</h2>}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        taskList: state.taskList,\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onLoad: param => dispatch(getTaskList(param)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n","import React from 'react';\r\nimport { Btn } from './ControllButtons.module.scss'\r\nconst PaginationButton = ({ num, handleClick }) => {\r\n  return (\r\n    <button\r\n      className={Btn}\r\n      style={localStorage.getItem('currentPagePosition') === `${num}` ? { color: 'red' } : null}\r\n      onClick={() => {\r\n        localStorage.setItem('currentPagePosition', `${num}`)\r\n        handleClick(num)\r\n      }\r\n      }>{num}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default PaginationButton\r\n","import React from 'react';\r\nimport PaginationBtn from './PaginationButton';\r\nimport { connect } from 'react-redux';\r\nimport { getTaskList } from '../../store/actions';\r\nimport { BtnPaginationContainer } from './ControllButtons.module.scss'\r\n\r\nconst PaginationButtons = ({ total_task_count, onLoad }) => {\r\n  return (\r\n    <section>\r\n      <div className={BtnPaginationContainer}>{\r\n        total_task_count.length ? total_task_count.map((item, index) =>\r\n          <PaginationBtn handleClick={onLoad} key={index} num={index + 1} />) : null\r\n      }</div>\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    total_task_count: state.total_task_count\r\n  }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onLoad: page => dispatch(getTaskList(page)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PaginationButtons) \r\n","import React, { useState, useEffect } from 'react';\r\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from \"react-icons/md\";\r\nimport { connect } from 'react-redux';\r\nimport { getTaskList } from '../../store/actions';\r\nimport { Btn } from './ControllButtons.module.scss';\r\n\r\n\r\nconst SortButtons = ({ onSort, sortField }) => {\r\n\r\n  let [state, setState] = useState({ clickCount: 1, direction: 'asc' });\r\n\r\n  useEffect(() => {\r\n    if (state.clickCount !== 1) {\r\n      localStorage.setItem('sortDirection', state.direction);\r\n      localStorage.setItem('sortField', sortField);\r\n      onSort(localStorage.getItem('currentPagePosition'), sortField);\r\n    }\r\n  })\r\n\r\n  const sortListItem = () => {\r\n    if (state.clickCount % 2 === 0) {\r\n      setState(prevState => {\r\n        return {\r\n          clickCount: prevState.clickCount + 1,\r\n          direction: 'desc'\r\n        }\r\n      })\r\n    } else {\r\n      setState(prevState => {\r\n        return {\r\n          clickCount: prevState.clickCount + 1,\r\n          direction: 'asc'\r\n        }\r\n      })\r\n    }\r\n  }\r\n  return (\r\n      <button className={Btn} onClick={sortListItem}>\r\n        {(sortField === 'username' && 'имя') ||\r\n          (sortField === 'email' && 'email') ||\r\n          (sortField === 'status' && 'статус')}\r\n        {state.direction === 'asc' ? <MdKeyboardArrowDown /> : <MdKeyboardArrowUp />}\r\n      </button>\r\n  )\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onSort: (pageNumber, sortField, sortDirection) => dispatch(getTaskList(pageNumber, sortField, sortDirection))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SortButtons)\r\n","import React from 'react';\r\nimport SortButton from './SortButton';\r\nimport { BtnSortContainer } from './ControllButtons.module.scss'\r\nconst SortButtons = () => {\r\n  return (\r\n    <section className={BtnSortContainer} >{\r\n      ['status', 'username', 'email'].map((item, index) => (<SortButton sortField={item} key={index} />))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SortButtons\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MassageContainer, rSuccess, rError } from './Massage.module.scss';\r\n\r\n\r\nconst Message = ({ responseMessage, responseStatus }) => {\r\n\r\n  return (\r\n    <>\r\n      {responseStatus.length ?\r\n        <div className={MassageContainer}>\r\n          <h2 className={responseStatus === 'ok' ? rSuccess : rError}>{responseMessage || 'Успешно'}</h2>\r\n        </div> :\r\n        <div className={MassageContainer}>\r\n        </div>}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    responseStatus: state.responseStatus,\r\n    responseMessage: state.responseMessage\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Message)\r\n","import React from 'react';\nimport Header from './components/header/Header';\nimport CreateTask from './components/createTaskBar/CreateTask';\nimport Tasks from './components/tasks/Tasks';\nimport PaginationButtons from './components/controllButtons/PaginationButtons';\nimport SortButtons from './components/controllButtons/SortButtons';\nimport Message from './components/message/Message';\nimport './index.css';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <main>\n        <Message />\n        <CreateTask />\n        <PaginationButtons />\n        <SortButtons />\n        <Tasks />\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","\r\nconst initialState = {\r\n    taskList: [],\r\n    isAdmin: localStorage.getItem('token') ? true : false,\r\n    responseStatus: '',\r\n    responseMessage: '',\r\n    total_task_count: '',\r\n}\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_LOGIN_TOKEN_START':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'FETCH_LOGIN_TOKEN_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isAdmin: true,\r\n                adminToken: action.token\r\n            }\r\n        case 'FETCH_LOGIN_TOKEN_ERROR':\r\n            return {\r\n                ...state,\r\n                isAdmin: false,\r\n                responseMessage: action.responseMassage,\r\n                responseStatus: action.responseStatus\r\n            }\r\n\r\n        case 'FETCH_TASK_LIST_START':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'FETCH_TASK_LIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                taskList: action.taskList,\r\n                total_task_count: action.total_task_count\r\n            }\r\n        case 'FETCH_TASK_LIST_ERROR':\r\n            return {\r\n                ...state,\r\n                errorMassage: action.errorMassage\r\n            }\r\n        case 'START_POSTING_EDITED_DATA':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'POSTING_EDITED_DATA_SUCCESS':\r\n            return {\r\n                ...state, responseStatus: action.responseStatus\r\n            }\r\n        case 'POSTING_EDITED_DATA_ERROR':\r\n            return {\r\n                ...state,\r\n                isAdmin: false,\r\n                responseStatus: action.responseStatus,\r\n                responseMessage: action.responseMessage\r\n            }\r\n        case 'START_SENDING_NEW_TASK':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'SENDING_NEW_TASK_SUCCESS':\r\n            return {\r\n                ...state,\r\n                responseStatus: action.responseStatus,\r\n                responseMessage: ''\r\n            }\r\n        case 'SENDING_NEW_TASK_ERROR':\r\n            return {\r\n                ...state\r\n            }\r\n        case 'EXIT':\r\n            return {\r\n                ...state, adminToken: action.adminToken, isAdmin: action.isAdmin\r\n            }\r\n        case 'MESSAGE_REFRESH':\r\n            return {\r\n                ...state,\r\n                responseStatus: '',\r\n                responseMessage: ''\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './store/reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nconst app = (\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3OGO0\",\"Form\":\"header_Form__2UcT0\",\"FormGroup\":\"header_FormGroup__2qyAc\",\"Btn\":\"header_Btn__1WUdQ\",\"Logo\":\"header_Logo__2MM7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Btn\":\"ControllButtons_Btn__1Li3r\",\"BtnPaginationContainer\":\"ControllButtons_BtnPaginationContainer__2jo8a\",\"BtnSortContainer\":\"ControllButtons_BtnSortContainer__2gxdE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskContainer\":\"Task_TaskContainer__39SHD\",\"Task\":\"Task_Task__1GcLs\",\"TaskLabel\":\"Task_TaskLabel__1lmXM\",\"TaskForm\":\"Task_TaskForm__1_xi6\",\"TaskTextarea\":\"Task_TaskTextarea__greOa\",\"Btn\":\"Task_Btn__2E27L\"};"],"sourceRoot":""}